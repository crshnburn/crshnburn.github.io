<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Coding Snippets</title>
 <link href="http://crshnburn.github.io/atom.xml" rel="self"/>
 <link href="http://crshnburn.github.io/"/>
 <updated>2014-10-07T15:12:53+01:00</updated>
 <id>http://crshnburn.github.io</id>
 <author>
   <name>Andrew Smithson</name>
   <email></email>
 </author>

 
 <entry>
   <title>Simple Java Producer/Consumer</title>
   <link href="http://crshnburn.github.io/2014/10/07/simple-java-producer-consumer/"/>
   <updated>2014-10-07T00:00:00+01:00</updated>
   <id>http://crshnburn.github.io/2014/10/07/simple-java-producer-consumer</id>
   <content type="html">&lt;p&gt;For a recent project I needed to have a some data stored in a remote database but having this happen on the main processing thread introduced too much of a delay.&lt;/p&gt;

&lt;p&gt;To counter this the slow part needed to be moved off to another thread but retain a way to communicate with the main thread. This was done using the &lt;code&gt;ArrayBlockingQueue&lt;/code&gt; class to store the data objects until they&amp;#39;re ready to be processed.&lt;/p&gt;

&lt;p&gt;The main thread that is producing the data can then put an object on the queue using the &lt;code&gt;put&lt;/code&gt; method. This will block if the queue is full, so if this is likely to be a problem due to slow processing by the consumer the size of the queue will need to be made big enough to accomodate this.&lt;/p&gt;

&lt;p&gt;The Consumer thread that is then started can loop forever and wait on the &lt;code&gt;take&lt;/code&gt; method of the queue until some data is &lt;code&gt;put&lt;/code&gt; there and then do the processing to store it in the remote database.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Signal 11 in CICS program</title>
   <link href="http://crshnburn.github.io/2014/08/21/sig11-in-cics-program/"/>
   <updated>2014-08-21T00:00:00+01:00</updated>
   <id>http://crshnburn.github.io/2014/08/21/sig11-in-cics-program</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve dusted off my CICS programming skills for a small project and while trying to debug a problem using the &lt;code&gt;resp&lt;/code&gt; and &lt;code&gt;resp2&lt;/code&gt; codes from an &lt;code&gt;exec cics&lt;/code&gt; call, the program starting terminating with a signal 11.&lt;/p&gt;

&lt;p&gt;As it turns out I&amp;#39;d forgotten a crucial line of code to add at the start of the main function
&lt;code&gt;c
exec cics address eib(dfheiptr);
&lt;/code&gt;
which sets up the required pointers to access the response codes.&lt;/p&gt;

&lt;p&gt;Without this line the translated code attempts to dereference a &lt;code&gt;NULL&lt;/code&gt; pointer and you end up in the same mess I did, with signal 11 termination of the program.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating objects to store in Bluemix Mobile Data</title>
   <link href="http://crshnburn.github.io/2014/08/13/bluemix-mobile-data-objects/"/>
   <updated>2014-08-13T00:00:00+01:00</updated>
   <id>http://crshnburn.github.io/2014/08/13/bluemix-mobile-data-objects</id>
   <content type="html">&lt;p&gt;Using IBM &lt;a href=&quot;http://bluemix.net&quot;&gt;Bluemix&lt;/a&gt; to create mobile applications provides a great service for storing data in the cloud.&lt;/p&gt;

&lt;p&gt;Below is how I set-up my own objects to be stored from an iPhone app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new Objective-C object that extends &lt;code&gt;IBMDataObject&lt;/code&gt; and implements &lt;code&gt;IBMDataObjectSpecialization&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Conference&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;IBMDataObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBMDataObjectSpecialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Add properties for each of the fields that will be stored in the database&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conferenceTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentationTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfAttendees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Define the properties as &lt;code&gt;dynamic&lt;/code&gt; in the implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conferenceTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentationTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberOfAttendees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Override the &lt;code&gt;dataClassName&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataClassName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Conference&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This object can then be used with any of the API calls that add or retrieve data from the database.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Connecting to a self signed cert from iOS</title>
   <link href="http://crshnburn.github.io/2014/08/11/self-signed-certs-ios/"/>
   <updated>2014-08-11T00:00:00+01:00</updated>
   <id>http://crshnburn.github.io/2014/08/11/self-signed-certs-ios</id>
   <content type="html">&lt;p&gt;One of the key advantages of SSL/HTTPS is that the certificate authority (CA) functionality means you don&amp;#39;t need to manage a certificate for every server you want to connect to.&lt;/p&gt;

&lt;p&gt;On the downside, if you have a test server you don&amp;#39;t want to go to the expense of getting an externally signed certificate when there may be only one user, so you resort to a self-signed certificate.&lt;/p&gt;

&lt;p&gt;By default iOS applications will not connect to these servers over HTTPS but with the following snippet added to the bottom of your &lt;code&gt;AppDelegate.m&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURLRequest&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;(DataController)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allowsAnyHTTPSCertificateForHost:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
